* Lambda MCTS

  Algorithm synthesis based on Monte-Carlo tree search on custom primitives, expressed as lambda terms.
  
  Primitives are either *atoms* (terms that do not take arguments) or (curried) *functions*.

  Algorithm ASTs are represented as nested arrays of these primitive terms, e.g. for suitably defined primitives:

  + [[ADD, 1], 2] evaluates to 3.
  + [SIGMOID, [LINEAR]] evaluates to a single layer perceptron, or more precisely to a function with
    signature a -> b -> c -> (x -> y), i.e. taking in sigmoid steepness, weights and biases to produce a SLP.
  
  The state space elements (arrays) correspond to potential nodes in the MCTS tree.
  
  A Node is expanded by attaching new terms to the left or right of the current erm.  
